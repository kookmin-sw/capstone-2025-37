using DG.Tweening;
using Mono.CSharp;
using Sirenix.OdinInspector;
using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using UnityEditor;
using UnityEngine;
using UnityEngine.SceneManagement;

namespace DominoGames.UI.PopupSystem
{
    public partial class PopupSystem : SerializedMonoBehaviour
    {
        [SerializeField] private Dictionary<string, PopupBase> popupMap = new();
        [SerializeField, ChildGameObjectsOnly] private GameObject backPanel;


        [Button]
        public void BuildPopups()
        {
            string sceneName = SceneManager.GetActiveScene().name;
            PopupBase[] popupBases = GetComponentsInChildren<PopupBase>(true);

            // make popup map => popup name : popup object
            MakePopupMap(popupBases);

            MakePopupScript(sceneName, popupBases);
        }
        private void MakePopupMap(PopupBase[] popupBases)
        {
            popupMap.Clear();

            for(int i = 0; i < popupBases.Length; i++)
            {
                popupMap.Add(popupBases[i].gameObject.name, popupBases[i]);
            }
        }

        private string TabString(int depth)
        {
            return new string(' ', depth * 4);
        }

        private string endl = "\n";
        private void MakePopupScript(string sceneName, PopupBase[] popupBases)
        {
            string targetPath = Path.Combine(Application.dataPath, "DominoGames/UI/PopupSystem", "PopupScript_" + sceneName + "(AutoGenerated).cs");
            string content = "using System;\n\n";

            content += MakeEnum(sceneName, popupBases) + endl;
            content += MakePartialClass(sceneName, popupBases);
            
            File.WriteAllText(targetPath, content);

#if UNITY_EDITOR
            AssetDatabase.Refresh();
#endif
        }
        private string MakeEnum(string sceneName, PopupBase[] popupBases)
        {
            string enumContent = "";
            enumContent += $"public enum EPopupNames_{sceneName}{endl}";
            enumContent += "{" + endl;

            for (int i = 0; i < popupBases.Length; i++)
            {
                enumContent += $"{TabString(1)}{popupBases[i].gameObject.name}," + endl;
            }

            enumContent += "}" + endl;

            return enumContent;
        }
        private string MakePartialClass(string sceneName, PopupBase[] popupBases)
        {
            string content = "";

            content += "namespace DominoGames.UI.PopupSystem\n{\n";

            content += TabString(1) + "public partial class PopupSystem{" + endl;
            content += TabString(2) + "public class " + sceneName + "{" + endl;

            for(int i = 0; i < popupBases.Length; i++)
            {
                string popupName = popupBases[i].gameObject.name;
                content += $"{TabString(3)}public class {popupName}{{{endl}";
                
                var argsType = GetOnPopupShowMethodArgsType(popupBases[i]);

                content += $"{TabString(4)}public static void Show({argsType.FullName} args, Action<PopupBase> direction = null){endl}";
                content += TabString(4) + "{\n";
                content += TabString(5) + "PopupSystem.Show(EPopupNames_" + sceneName + "." + popupName + ", args, direction);" + endl;
                content += TabString(4) + "}\n";
                content += $"{TabString(4)}public static void Hide(Action<PopupBase> direction = null){endl}";
                content += TabString(4) + "{\n";
                content += TabString(5) + "PopupSystem.Hide(EPopupNames_" + sceneName + "." + popupName + ", direction);" + endl;
                content += TabString(4) + "}\n";

                content += $"{TabString(3)}}}{endl}";
            }

            content += TabString(2) + "}" + endl;
            content += TabString(1) + "}" + endl;
            content += "}" + endl;

            return content;
        }
        private Type GetOnPopupShowMethodArgsType(PopupBase target)
        {
            var classType = target.GetType();
            var method = classType.GetMethod("OnShow", System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public);
            var typeAttr = method.GetCustomAttribute<PopupArgsTypeAttribute>();
            if(typeAttr == null)
            {
                return typeof(object);
            }
            return typeAttr.argsType;
        }




        public static void Show<T1>(T1 targetPopup, object args, Action<PopupBase> direction = null) where T1 : System.Enum
        {
            string sceneName = targetPopup.GetType().Name.Split("_")[1];
            string activeSceneName = SceneManager.GetActiveScene().name;
            if (sceneName != activeSceneName)
            {
                Debug.LogError($"Scene name is not matched : {activeSceneName}(current) != {sceneName}(input)");
                return;
            }

            Show(targetPopup.ToString(), args, direction);
        }
        public static void Show(string targetPopup, object args, Action<PopupBase> direction = null)
        {
            if (direction == null)
            {
                direction = MakeScaleShowDirection(0.25f, Ease.OutBack);
            }

            direction(Instance.popupMap[targetPopup]);

            Instance.popupMap[targetPopup].transform.SetAsLastSibling();
            Instance.popupMap[targetPopup].GetComponent<CanvasGroup>().interactable = true;
            Instance.popupMap[targetPopup].OnShow(args);

            Instance.backPanel.SetActive(true);
        }

        public static void Hide<T1>(T1 targetPopup, Action<PopupBase> direction = null)
        {
            string sceneName = targetPopup.GetType().Name.Split("_")[1];
            string activeSceneName = SceneManager.GetActiveScene().name;
            if (sceneName != activeSceneName)
            {
                Debug.LogError($"Scene name is not matched : {activeSceneName}(current) != {sceneName}(input)");
                return;
            }

            Hide(targetPopup.ToString(), direction);
        }
        public static void Hide(string targetPopup, Action<PopupBase> direction = null)
        {
            if (direction == null)
            {
                direction = (x) =>
                {
                    x.gameObject.SetActive(false);
                };
            }

            direction(Instance.popupMap[targetPopup]);
            Instance.popupMap[targetPopup].GetComponent<CanvasGroup>().interactable = false;
            Instance.popupMap[targetPopup].OnHide();

            if(!Instance.popupMap.Any(x => x.Value.gameObject.activeSelf))
            {
                Instance.backPanel.SetActive(false);
            }
        }



        public static Action<PopupBase> MakeScaleShowDirection(float duration, Ease ease)
        {
            return (popup) =>
            {
                popup.gameObject.SetActive(true);
                popup.transform.localScale = Vector3.zero;
                popup.transform.DOKill();
                popup.transform.DOScale(1f, duration).SetEase(ease);
            };
        }
        public static Action<PopupBase> MakeScaleHideDirection(float duration, Ease ease)
        {
            return (popup) =>
            {
                popup.transform.DOKill();
                popup.transform.DOScale(0f, duration).SetEase(ease).OnComplete(() =>
                {
                    popup.gameObject.SetActive(false);
                });
            };
        }



        public static PopupSystem Instance;
        private void Awake()
        {
            Instance = this;
        }
    }

    [RequireComponent(typeof(CanvasGroup))]
    public abstract class PopupBase : UI_Base
    {
        public abstract void OnShow(object args);
        public abstract void OnHide();


        [Button]
        public void ShowHidePopup()
        {
            if (gameObject.activeSelf)
            {
                transform.localScale = Vector3.zero;
                gameObject.SetActive(false);
            }
            else
            {
                transform.localScale = Vector3.one;
                gameObject.SetActive(true);
            }
        }
    }

    public class PopupArgsTypeAttribute : System.Attribute
    {
        public Type argsType;

        public PopupArgsTypeAttribute(Type argsType)
        {
            this.argsType = argsType;
        }
    }

    public enum TestScenePopup
    {
        dsfa_Overlay
    }
}